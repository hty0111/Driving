// Generated by gencpp from file yhs_can_msgs/Veh_Diag_fb.msg
// DO NOT EDIT!


#ifndef YHS_CAN_MSGS_MESSAGE_VEH_DIAG_FB_H
#define YHS_CAN_MSGS_MESSAGE_VEH_DIAG_FB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yhs_can_msgs
{
template <class ContainerAllocator>
struct Veh_Diag_fb_
{
  typedef Veh_Diag_fb_<ContainerAllocator> Type;

  Veh_Diag_fb_()
    : Veh_fb_FaultLevel(0)
    , Veh_fb_AutoCANCtrlCmd(false)
    , Veh_fb_AutoIOCANCmd(false)
    , Veh_fb_EPSDisOnline(false)
    , Veh_fb_EPSfault(false)
    , Veh_fb_EPSMosfetOT(false)
    , Veh_fb_EPSWarning(false)
    , Veh_fb_EPSDisWork(false)
    , Veh_fb_EPSOverCurrent(false)
    , Veh_fb_STReserve(false)
    , Veh_fb_EHBecuFault(false)
    , Veh_fb_EHBDisOnline(false)
    , Veh_fb_EHBWorkModelFault(false)
    , Veh_fb_EHBDisEn(false)
    , Veh_fb_EHBAnguleFault(false)
    , Veh_fb_EHBOT(false)
    , Veh_fb_EHBPowerFault(false)
    , Veh_fb_EHBsensorAbnomal(false)
    , Veh_fb_EHBMotorFault(false)
    , Veh_fb_EHBOilPressSensorFault(false)
    , Veh_fb_EHBOilFault(false)
    , Veh_fb_BraReserve(false)
    , Veh_fb_DrvMCUDisOnline(false)
    , Veh_fb_DrvMCUOT(false)
    , Veh_fb_DrvMCUOV(false)
    , Veh_fb_DrvMCUUV(false)
    , Veh_fb_DrvMCUShort(false)
    , Veh_fb_DrvMCUScram(false)
    , Veh_fb_DrvMCUHall(false)
    , Veh_fb_DrvMCUMOSFEF(false)
    , Veh_fb_DrvReserve(false)
    , Veh_fb_AUXBMSDisOnline(false)
    , Veh_fb_AuxScram(false)
    , Veh_fb_AuxRemoteClose(false)
    , Veh_fb_AuxRemoteDisOnline(false)
    , Veh_fb_AuxReserve(false)  {
    }
  Veh_Diag_fb_(const ContainerAllocator& _alloc)
    : Veh_fb_FaultLevel(0)
    , Veh_fb_AutoCANCtrlCmd(false)
    , Veh_fb_AutoIOCANCmd(false)
    , Veh_fb_EPSDisOnline(false)
    , Veh_fb_EPSfault(false)
    , Veh_fb_EPSMosfetOT(false)
    , Veh_fb_EPSWarning(false)
    , Veh_fb_EPSDisWork(false)
    , Veh_fb_EPSOverCurrent(false)
    , Veh_fb_STReserve(false)
    , Veh_fb_EHBecuFault(false)
    , Veh_fb_EHBDisOnline(false)
    , Veh_fb_EHBWorkModelFault(false)
    , Veh_fb_EHBDisEn(false)
    , Veh_fb_EHBAnguleFault(false)
    , Veh_fb_EHBOT(false)
    , Veh_fb_EHBPowerFault(false)
    , Veh_fb_EHBsensorAbnomal(false)
    , Veh_fb_EHBMotorFault(false)
    , Veh_fb_EHBOilPressSensorFault(false)
    , Veh_fb_EHBOilFault(false)
    , Veh_fb_BraReserve(false)
    , Veh_fb_DrvMCUDisOnline(false)
    , Veh_fb_DrvMCUOT(false)
    , Veh_fb_DrvMCUOV(false)
    , Veh_fb_DrvMCUUV(false)
    , Veh_fb_DrvMCUShort(false)
    , Veh_fb_DrvMCUScram(false)
    , Veh_fb_DrvMCUHall(false)
    , Veh_fb_DrvMCUMOSFEF(false)
    , Veh_fb_DrvReserve(false)
    , Veh_fb_AUXBMSDisOnline(false)
    , Veh_fb_AuxScram(false)
    , Veh_fb_AuxRemoteClose(false)
    , Veh_fb_AuxRemoteDisOnline(false)
    , Veh_fb_AuxReserve(false)  {
  (void)_alloc;
    }



   typedef uint8_t _Veh_fb_FaultLevel_type;
  _Veh_fb_FaultLevel_type Veh_fb_FaultLevel;

   typedef uint8_t _Veh_fb_AutoCANCtrlCmd_type;
  _Veh_fb_AutoCANCtrlCmd_type Veh_fb_AutoCANCtrlCmd;

   typedef uint8_t _Veh_fb_AutoIOCANCmd_type;
  _Veh_fb_AutoIOCANCmd_type Veh_fb_AutoIOCANCmd;

   typedef uint8_t _Veh_fb_EPSDisOnline_type;
  _Veh_fb_EPSDisOnline_type Veh_fb_EPSDisOnline;

   typedef uint8_t _Veh_fb_EPSfault_type;
  _Veh_fb_EPSfault_type Veh_fb_EPSfault;

   typedef uint8_t _Veh_fb_EPSMosfetOT_type;
  _Veh_fb_EPSMosfetOT_type Veh_fb_EPSMosfetOT;

   typedef uint8_t _Veh_fb_EPSWarning_type;
  _Veh_fb_EPSWarning_type Veh_fb_EPSWarning;

   typedef uint8_t _Veh_fb_EPSDisWork_type;
  _Veh_fb_EPSDisWork_type Veh_fb_EPSDisWork;

   typedef uint8_t _Veh_fb_EPSOverCurrent_type;
  _Veh_fb_EPSOverCurrent_type Veh_fb_EPSOverCurrent;

   typedef uint8_t _Veh_fb_STReserve_type;
  _Veh_fb_STReserve_type Veh_fb_STReserve;

   typedef uint8_t _Veh_fb_EHBecuFault_type;
  _Veh_fb_EHBecuFault_type Veh_fb_EHBecuFault;

   typedef uint8_t _Veh_fb_EHBDisOnline_type;
  _Veh_fb_EHBDisOnline_type Veh_fb_EHBDisOnline;

   typedef uint8_t _Veh_fb_EHBWorkModelFault_type;
  _Veh_fb_EHBWorkModelFault_type Veh_fb_EHBWorkModelFault;

   typedef uint8_t _Veh_fb_EHBDisEn_type;
  _Veh_fb_EHBDisEn_type Veh_fb_EHBDisEn;

   typedef uint8_t _Veh_fb_EHBAnguleFault_type;
  _Veh_fb_EHBAnguleFault_type Veh_fb_EHBAnguleFault;

   typedef uint8_t _Veh_fb_EHBOT_type;
  _Veh_fb_EHBOT_type Veh_fb_EHBOT;

   typedef uint8_t _Veh_fb_EHBPowerFault_type;
  _Veh_fb_EHBPowerFault_type Veh_fb_EHBPowerFault;

   typedef uint8_t _Veh_fb_EHBsensorAbnomal_type;
  _Veh_fb_EHBsensorAbnomal_type Veh_fb_EHBsensorAbnomal;

   typedef uint8_t _Veh_fb_EHBMotorFault_type;
  _Veh_fb_EHBMotorFault_type Veh_fb_EHBMotorFault;

   typedef uint8_t _Veh_fb_EHBOilPressSensorFault_type;
  _Veh_fb_EHBOilPressSensorFault_type Veh_fb_EHBOilPressSensorFault;

   typedef uint8_t _Veh_fb_EHBOilFault_type;
  _Veh_fb_EHBOilFault_type Veh_fb_EHBOilFault;

   typedef uint8_t _Veh_fb_BraReserve_type;
  _Veh_fb_BraReserve_type Veh_fb_BraReserve;

   typedef uint8_t _Veh_fb_DrvMCUDisOnline_type;
  _Veh_fb_DrvMCUDisOnline_type Veh_fb_DrvMCUDisOnline;

   typedef uint8_t _Veh_fb_DrvMCUOT_type;
  _Veh_fb_DrvMCUOT_type Veh_fb_DrvMCUOT;

   typedef uint8_t _Veh_fb_DrvMCUOV_type;
  _Veh_fb_DrvMCUOV_type Veh_fb_DrvMCUOV;

   typedef uint8_t _Veh_fb_DrvMCUUV_type;
  _Veh_fb_DrvMCUUV_type Veh_fb_DrvMCUUV;

   typedef uint8_t _Veh_fb_DrvMCUShort_type;
  _Veh_fb_DrvMCUShort_type Veh_fb_DrvMCUShort;

   typedef uint8_t _Veh_fb_DrvMCUScram_type;
  _Veh_fb_DrvMCUScram_type Veh_fb_DrvMCUScram;

   typedef uint8_t _Veh_fb_DrvMCUHall_type;
  _Veh_fb_DrvMCUHall_type Veh_fb_DrvMCUHall;

   typedef uint8_t _Veh_fb_DrvMCUMOSFEF_type;
  _Veh_fb_DrvMCUMOSFEF_type Veh_fb_DrvMCUMOSFEF;

   typedef uint8_t _Veh_fb_DrvReserve_type;
  _Veh_fb_DrvReserve_type Veh_fb_DrvReserve;

   typedef uint8_t _Veh_fb_AUXBMSDisOnline_type;
  _Veh_fb_AUXBMSDisOnline_type Veh_fb_AUXBMSDisOnline;

   typedef uint8_t _Veh_fb_AuxScram_type;
  _Veh_fb_AuxScram_type Veh_fb_AuxScram;

   typedef uint8_t _Veh_fb_AuxRemoteClose_type;
  _Veh_fb_AuxRemoteClose_type Veh_fb_AuxRemoteClose;

   typedef uint8_t _Veh_fb_AuxRemoteDisOnline_type;
  _Veh_fb_AuxRemoteDisOnline_type Veh_fb_AuxRemoteDisOnline;

   typedef uint8_t _Veh_fb_AuxReserve_type;
  _Veh_fb_AuxReserve_type Veh_fb_AuxReserve;





  typedef boost::shared_ptr< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> const> ConstPtr;

}; // struct Veh_Diag_fb_

typedef ::yhs_can_msgs::Veh_Diag_fb_<std::allocator<void> > Veh_Diag_fb;

typedef boost::shared_ptr< ::yhs_can_msgs::Veh_Diag_fb > Veh_Diag_fbPtr;
typedef boost::shared_ptr< ::yhs_can_msgs::Veh_Diag_fb const> Veh_Diag_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator2> & rhs)
{
  return lhs.Veh_fb_FaultLevel == rhs.Veh_fb_FaultLevel &&
    lhs.Veh_fb_AutoCANCtrlCmd == rhs.Veh_fb_AutoCANCtrlCmd &&
    lhs.Veh_fb_AutoIOCANCmd == rhs.Veh_fb_AutoIOCANCmd &&
    lhs.Veh_fb_EPSDisOnline == rhs.Veh_fb_EPSDisOnline &&
    lhs.Veh_fb_EPSfault == rhs.Veh_fb_EPSfault &&
    lhs.Veh_fb_EPSMosfetOT == rhs.Veh_fb_EPSMosfetOT &&
    lhs.Veh_fb_EPSWarning == rhs.Veh_fb_EPSWarning &&
    lhs.Veh_fb_EPSDisWork == rhs.Veh_fb_EPSDisWork &&
    lhs.Veh_fb_EPSOverCurrent == rhs.Veh_fb_EPSOverCurrent &&
    lhs.Veh_fb_STReserve == rhs.Veh_fb_STReserve &&
    lhs.Veh_fb_EHBecuFault == rhs.Veh_fb_EHBecuFault &&
    lhs.Veh_fb_EHBDisOnline == rhs.Veh_fb_EHBDisOnline &&
    lhs.Veh_fb_EHBWorkModelFault == rhs.Veh_fb_EHBWorkModelFault &&
    lhs.Veh_fb_EHBDisEn == rhs.Veh_fb_EHBDisEn &&
    lhs.Veh_fb_EHBAnguleFault == rhs.Veh_fb_EHBAnguleFault &&
    lhs.Veh_fb_EHBOT == rhs.Veh_fb_EHBOT &&
    lhs.Veh_fb_EHBPowerFault == rhs.Veh_fb_EHBPowerFault &&
    lhs.Veh_fb_EHBsensorAbnomal == rhs.Veh_fb_EHBsensorAbnomal &&
    lhs.Veh_fb_EHBMotorFault == rhs.Veh_fb_EHBMotorFault &&
    lhs.Veh_fb_EHBOilPressSensorFault == rhs.Veh_fb_EHBOilPressSensorFault &&
    lhs.Veh_fb_EHBOilFault == rhs.Veh_fb_EHBOilFault &&
    lhs.Veh_fb_BraReserve == rhs.Veh_fb_BraReserve &&
    lhs.Veh_fb_DrvMCUDisOnline == rhs.Veh_fb_DrvMCUDisOnline &&
    lhs.Veh_fb_DrvMCUOT == rhs.Veh_fb_DrvMCUOT &&
    lhs.Veh_fb_DrvMCUOV == rhs.Veh_fb_DrvMCUOV &&
    lhs.Veh_fb_DrvMCUUV == rhs.Veh_fb_DrvMCUUV &&
    lhs.Veh_fb_DrvMCUShort == rhs.Veh_fb_DrvMCUShort &&
    lhs.Veh_fb_DrvMCUScram == rhs.Veh_fb_DrvMCUScram &&
    lhs.Veh_fb_DrvMCUHall == rhs.Veh_fb_DrvMCUHall &&
    lhs.Veh_fb_DrvMCUMOSFEF == rhs.Veh_fb_DrvMCUMOSFEF &&
    lhs.Veh_fb_DrvReserve == rhs.Veh_fb_DrvReserve &&
    lhs.Veh_fb_AUXBMSDisOnline == rhs.Veh_fb_AUXBMSDisOnline &&
    lhs.Veh_fb_AuxScram == rhs.Veh_fb_AuxScram &&
    lhs.Veh_fb_AuxRemoteClose == rhs.Veh_fb_AuxRemoteClose &&
    lhs.Veh_fb_AuxRemoteDisOnline == rhs.Veh_fb_AuxRemoteDisOnline &&
    lhs.Veh_fb_AuxReserve == rhs.Veh_fb_AuxReserve;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yhs_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad9f4ebd1a52940a4c31220f7eec0424";
  }

  static const char* value(const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad9f4ebd1a52940aULL;
  static const uint64_t static_value2 = 0x4c31220f7eec0424ULL;
};

template<class ContainerAllocator>
struct DataType< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yhs_can_msgs/Veh_Diag_fb";
  }

  static const char* value(const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 Veh_fb_FaultLevel\n"
"bool Veh_fb_AutoCANCtrlCmd\n"
"bool Veh_fb_AutoIOCANCmd\n"
"\n"
"bool Veh_fb_EPSDisOnline\n"
"bool Veh_fb_EPSfault\n"
"\n"
"bool Veh_fb_EPSMosfetOT\n"
"\n"
"bool Veh_fb_EPSWarning\n"
"\n"
"bool Veh_fb_EPSDisWork\n"
"\n"
"bool Veh_fb_EPSOverCurrent\n"
"\n"
"bool Veh_fb_STReserve\n"
"\n"
"bool Veh_fb_EHBecuFault\n"
"\n"
"bool Veh_fb_EHBDisOnline\n"
"\n"
"bool Veh_fb_EHBWorkModelFault\n"
"\n"
"bool Veh_fb_EHBDisEn\n"
"\n"
"bool Veh_fb_EHBAnguleFault\n"
"\n"
"bool Veh_fb_EHBOT\n"
"\n"
"bool Veh_fb_EHBPowerFault\n"
"\n"
"bool Veh_fb_EHBsensorAbnomal\n"
"\n"
"bool Veh_fb_EHBMotorFault\n"
"\n"
"bool Veh_fb_EHBOilPressSensorFault\n"
"\n"
"bool Veh_fb_EHBOilFault\n"
"\n"
"bool Veh_fb_BraReserve\n"
"\n"
"bool Veh_fb_DrvMCUDisOnline\n"
"\n"
"bool Veh_fb_DrvMCUOT\n"
"\n"
"bool Veh_fb_DrvMCUOV\n"
"\n"
"bool Veh_fb_DrvMCUUV\n"
"\n"
"bool Veh_fb_DrvMCUShort\n"
"\n"
"bool Veh_fb_DrvMCUScram\n"
"\n"
"bool Veh_fb_DrvMCUHall\n"
"\n"
"bool Veh_fb_DrvMCUMOSFEF\n"
"\n"
"bool Veh_fb_DrvReserve\n"
"\n"
"bool Veh_fb_AUXBMSDisOnline\n"
"\n"
"bool Veh_fb_AuxScram\n"
"\n"
"bool Veh_fb_AuxRemoteClose\n"
"\n"
"bool Veh_fb_AuxRemoteDisOnline\n"
"\n"
"bool Veh_fb_AuxReserve\n"
"\n"
;
  }

  static const char* value(const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Veh_fb_FaultLevel);
      stream.next(m.Veh_fb_AutoCANCtrlCmd);
      stream.next(m.Veh_fb_AutoIOCANCmd);
      stream.next(m.Veh_fb_EPSDisOnline);
      stream.next(m.Veh_fb_EPSfault);
      stream.next(m.Veh_fb_EPSMosfetOT);
      stream.next(m.Veh_fb_EPSWarning);
      stream.next(m.Veh_fb_EPSDisWork);
      stream.next(m.Veh_fb_EPSOverCurrent);
      stream.next(m.Veh_fb_STReserve);
      stream.next(m.Veh_fb_EHBecuFault);
      stream.next(m.Veh_fb_EHBDisOnline);
      stream.next(m.Veh_fb_EHBWorkModelFault);
      stream.next(m.Veh_fb_EHBDisEn);
      stream.next(m.Veh_fb_EHBAnguleFault);
      stream.next(m.Veh_fb_EHBOT);
      stream.next(m.Veh_fb_EHBPowerFault);
      stream.next(m.Veh_fb_EHBsensorAbnomal);
      stream.next(m.Veh_fb_EHBMotorFault);
      stream.next(m.Veh_fb_EHBOilPressSensorFault);
      stream.next(m.Veh_fb_EHBOilFault);
      stream.next(m.Veh_fb_BraReserve);
      stream.next(m.Veh_fb_DrvMCUDisOnline);
      stream.next(m.Veh_fb_DrvMCUOT);
      stream.next(m.Veh_fb_DrvMCUOV);
      stream.next(m.Veh_fb_DrvMCUUV);
      stream.next(m.Veh_fb_DrvMCUShort);
      stream.next(m.Veh_fb_DrvMCUScram);
      stream.next(m.Veh_fb_DrvMCUHall);
      stream.next(m.Veh_fb_DrvMCUMOSFEF);
      stream.next(m.Veh_fb_DrvReserve);
      stream.next(m.Veh_fb_AUXBMSDisOnline);
      stream.next(m.Veh_fb_AuxScram);
      stream.next(m.Veh_fb_AuxRemoteClose);
      stream.next(m.Veh_fb_AuxRemoteDisOnline);
      stream.next(m.Veh_fb_AuxReserve);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Veh_Diag_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yhs_can_msgs::Veh_Diag_fb_<ContainerAllocator>& v)
  {
    s << indent << "Veh_fb_FaultLevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_FaultLevel);
    s << indent << "Veh_fb_AutoCANCtrlCmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_AutoCANCtrlCmd);
    s << indent << "Veh_fb_AutoIOCANCmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_AutoIOCANCmd);
    s << indent << "Veh_fb_EPSDisOnline: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EPSDisOnline);
    s << indent << "Veh_fb_EPSfault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EPSfault);
    s << indent << "Veh_fb_EPSMosfetOT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EPSMosfetOT);
    s << indent << "Veh_fb_EPSWarning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EPSWarning);
    s << indent << "Veh_fb_EPSDisWork: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EPSDisWork);
    s << indent << "Veh_fb_EPSOverCurrent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EPSOverCurrent);
    s << indent << "Veh_fb_STReserve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_STReserve);
    s << indent << "Veh_fb_EHBecuFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBecuFault);
    s << indent << "Veh_fb_EHBDisOnline: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBDisOnline);
    s << indent << "Veh_fb_EHBWorkModelFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBWorkModelFault);
    s << indent << "Veh_fb_EHBDisEn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBDisEn);
    s << indent << "Veh_fb_EHBAnguleFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBAnguleFault);
    s << indent << "Veh_fb_EHBOT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBOT);
    s << indent << "Veh_fb_EHBPowerFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBPowerFault);
    s << indent << "Veh_fb_EHBsensorAbnomal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBsensorAbnomal);
    s << indent << "Veh_fb_EHBMotorFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBMotorFault);
    s << indent << "Veh_fb_EHBOilPressSensorFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBOilPressSensorFault);
    s << indent << "Veh_fb_EHBOilFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_EHBOilFault);
    s << indent << "Veh_fb_BraReserve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_BraReserve);
    s << indent << "Veh_fb_DrvMCUDisOnline: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvMCUDisOnline);
    s << indent << "Veh_fb_DrvMCUOT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvMCUOT);
    s << indent << "Veh_fb_DrvMCUOV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvMCUOV);
    s << indent << "Veh_fb_DrvMCUUV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvMCUUV);
    s << indent << "Veh_fb_DrvMCUShort: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvMCUShort);
    s << indent << "Veh_fb_DrvMCUScram: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvMCUScram);
    s << indent << "Veh_fb_DrvMCUHall: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvMCUHall);
    s << indent << "Veh_fb_DrvMCUMOSFEF: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvMCUMOSFEF);
    s << indent << "Veh_fb_DrvReserve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_DrvReserve);
    s << indent << "Veh_fb_AUXBMSDisOnline: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_AUXBMSDisOnline);
    s << indent << "Veh_fb_AuxScram: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_AuxScram);
    s << indent << "Veh_fb_AuxRemoteClose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_AuxRemoteClose);
    s << indent << "Veh_fb_AuxRemoteDisOnline: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_AuxRemoteDisOnline);
    s << indent << "Veh_fb_AuxReserve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_fb_AuxReserve);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YHS_CAN_MSGS_MESSAGE_VEH_DIAG_FB_H
