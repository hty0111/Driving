// Generated by gencpp from file yhs_can_msgs/bms_flag_Infor_fb.msg
// DO NOT EDIT!


#ifndef YHS_CAN_MSGS_MESSAGE_BMS_FLAG_INFOR_FB_H
#define YHS_CAN_MSGS_MESSAGE_BMS_FLAG_INFOR_FB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yhs_can_msgs
{
template <class ContainerAllocator>
struct bms_flag_Infor_fb_
{
  typedef bms_flag_Infor_fb_<ContainerAllocator> Type;

  bms_flag_Infor_fb_()
    : bms_flag_Infor_soc(0)
    , bms_flag_Infor_single_ov(false)
    , bms_flag_Infor_single_uv(false)
    , bms_flag_Infor_ov(false)
    , bms_flag_Infor_uv(false)
    , bms_flag_Infor_charge_ot(false)
    , bms_flag_Infor_charge_ut(false)
    , bms_flag_Infor_discharge_ot(false)
    , bms_flag_Infor_discharge_ut(false)
    , bms_flag_Infor_charge_oc(false)
    , bms_flag_Infor_discharge_oc(false)
    , bms_flag_Infor_short(false)
    , bms_flag_Infor_ic_error(false)
    , bms_flag_Infor_lock_mos(false)
    , bms_flag_Infor_charge_flag(false)
    , bms_flag_Infor_hight_temperature(0.0)
    , bms_flag_Infor_low_temperature(0.0)  {
    }
  bms_flag_Infor_fb_(const ContainerAllocator& _alloc)
    : bms_flag_Infor_soc(0)
    , bms_flag_Infor_single_ov(false)
    , bms_flag_Infor_single_uv(false)
    , bms_flag_Infor_ov(false)
    , bms_flag_Infor_uv(false)
    , bms_flag_Infor_charge_ot(false)
    , bms_flag_Infor_charge_ut(false)
    , bms_flag_Infor_discharge_ot(false)
    , bms_flag_Infor_discharge_ut(false)
    , bms_flag_Infor_charge_oc(false)
    , bms_flag_Infor_discharge_oc(false)
    , bms_flag_Infor_short(false)
    , bms_flag_Infor_ic_error(false)
    , bms_flag_Infor_lock_mos(false)
    , bms_flag_Infor_charge_flag(false)
    , bms_flag_Infor_hight_temperature(0.0)
    , bms_flag_Infor_low_temperature(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _bms_flag_Infor_soc_type;
  _bms_flag_Infor_soc_type bms_flag_Infor_soc;

   typedef uint8_t _bms_flag_Infor_single_ov_type;
  _bms_flag_Infor_single_ov_type bms_flag_Infor_single_ov;

   typedef uint8_t _bms_flag_Infor_single_uv_type;
  _bms_flag_Infor_single_uv_type bms_flag_Infor_single_uv;

   typedef uint8_t _bms_flag_Infor_ov_type;
  _bms_flag_Infor_ov_type bms_flag_Infor_ov;

   typedef uint8_t _bms_flag_Infor_uv_type;
  _bms_flag_Infor_uv_type bms_flag_Infor_uv;

   typedef uint8_t _bms_flag_Infor_charge_ot_type;
  _bms_flag_Infor_charge_ot_type bms_flag_Infor_charge_ot;

   typedef uint8_t _bms_flag_Infor_charge_ut_type;
  _bms_flag_Infor_charge_ut_type bms_flag_Infor_charge_ut;

   typedef uint8_t _bms_flag_Infor_discharge_ot_type;
  _bms_flag_Infor_discharge_ot_type bms_flag_Infor_discharge_ot;

   typedef uint8_t _bms_flag_Infor_discharge_ut_type;
  _bms_flag_Infor_discharge_ut_type bms_flag_Infor_discharge_ut;

   typedef uint8_t _bms_flag_Infor_charge_oc_type;
  _bms_flag_Infor_charge_oc_type bms_flag_Infor_charge_oc;

   typedef uint8_t _bms_flag_Infor_discharge_oc_type;
  _bms_flag_Infor_discharge_oc_type bms_flag_Infor_discharge_oc;

   typedef uint8_t _bms_flag_Infor_short_type;
  _bms_flag_Infor_short_type bms_flag_Infor_short;

   typedef uint8_t _bms_flag_Infor_ic_error_type;
  _bms_flag_Infor_ic_error_type bms_flag_Infor_ic_error;

   typedef uint8_t _bms_flag_Infor_lock_mos_type;
  _bms_flag_Infor_lock_mos_type bms_flag_Infor_lock_mos;

   typedef uint8_t _bms_flag_Infor_charge_flag_type;
  _bms_flag_Infor_charge_flag_type bms_flag_Infor_charge_flag;

   typedef float _bms_flag_Infor_hight_temperature_type;
  _bms_flag_Infor_hight_temperature_type bms_flag_Infor_hight_temperature;

   typedef float _bms_flag_Infor_low_temperature_type;
  _bms_flag_Infor_low_temperature_type bms_flag_Infor_low_temperature;





  typedef boost::shared_ptr< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> const> ConstPtr;

}; // struct bms_flag_Infor_fb_

typedef ::yhs_can_msgs::bms_flag_Infor_fb_<std::allocator<void> > bms_flag_Infor_fb;

typedef boost::shared_ptr< ::yhs_can_msgs::bms_flag_Infor_fb > bms_flag_Infor_fbPtr;
typedef boost::shared_ptr< ::yhs_can_msgs::bms_flag_Infor_fb const> bms_flag_Infor_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator2> & rhs)
{
  return lhs.bms_flag_Infor_soc == rhs.bms_flag_Infor_soc &&
    lhs.bms_flag_Infor_single_ov == rhs.bms_flag_Infor_single_ov &&
    lhs.bms_flag_Infor_single_uv == rhs.bms_flag_Infor_single_uv &&
    lhs.bms_flag_Infor_ov == rhs.bms_flag_Infor_ov &&
    lhs.bms_flag_Infor_uv == rhs.bms_flag_Infor_uv &&
    lhs.bms_flag_Infor_charge_ot == rhs.bms_flag_Infor_charge_ot &&
    lhs.bms_flag_Infor_charge_ut == rhs.bms_flag_Infor_charge_ut &&
    lhs.bms_flag_Infor_discharge_ot == rhs.bms_flag_Infor_discharge_ot &&
    lhs.bms_flag_Infor_discharge_ut == rhs.bms_flag_Infor_discharge_ut &&
    lhs.bms_flag_Infor_charge_oc == rhs.bms_flag_Infor_charge_oc &&
    lhs.bms_flag_Infor_discharge_oc == rhs.bms_flag_Infor_discharge_oc &&
    lhs.bms_flag_Infor_short == rhs.bms_flag_Infor_short &&
    lhs.bms_flag_Infor_ic_error == rhs.bms_flag_Infor_ic_error &&
    lhs.bms_flag_Infor_lock_mos == rhs.bms_flag_Infor_lock_mos &&
    lhs.bms_flag_Infor_charge_flag == rhs.bms_flag_Infor_charge_flag &&
    lhs.bms_flag_Infor_hight_temperature == rhs.bms_flag_Infor_hight_temperature &&
    lhs.bms_flag_Infor_low_temperature == rhs.bms_flag_Infor_low_temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yhs_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc1da126c4936d57a412f46b1eb2c451";
  }

  static const char* value(const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc1da126c4936d57ULL;
  static const uint64_t static_value2 = 0xa412f46b1eb2c451ULL;
};

template<class ContainerAllocator>
struct DataType< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yhs_can_msgs/bms_flag_Infor_fb";
  }

  static const char* value(const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 bms_flag_Infor_soc\n"
"bool bms_flag_Infor_single_ov\n"
"bool bms_flag_Infor_single_uv\n"
"bool bms_flag_Infor_ov\n"
"bool bms_flag_Infor_uv\n"
"bool bms_flag_Infor_charge_ot\n"
"bool bms_flag_Infor_charge_ut\n"
"bool bms_flag_Infor_discharge_ot\n"
"bool bms_flag_Infor_discharge_ut\n"
"bool bms_flag_Infor_charge_oc\n"
"bool bms_flag_Infor_discharge_oc\n"
"bool bms_flag_Infor_short\n"
"bool bms_flag_Infor_ic_error\n"
"bool bms_flag_Infor_lock_mos\n"
"bool bms_flag_Infor_charge_flag\n"
"float32 bms_flag_Infor_hight_temperature\n"
"float32 bms_flag_Infor_low_temperature\n"
;
  }

  static const char* value(const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bms_flag_Infor_soc);
      stream.next(m.bms_flag_Infor_single_ov);
      stream.next(m.bms_flag_Infor_single_uv);
      stream.next(m.bms_flag_Infor_ov);
      stream.next(m.bms_flag_Infor_uv);
      stream.next(m.bms_flag_Infor_charge_ot);
      stream.next(m.bms_flag_Infor_charge_ut);
      stream.next(m.bms_flag_Infor_discharge_ot);
      stream.next(m.bms_flag_Infor_discharge_ut);
      stream.next(m.bms_flag_Infor_charge_oc);
      stream.next(m.bms_flag_Infor_discharge_oc);
      stream.next(m.bms_flag_Infor_short);
      stream.next(m.bms_flag_Infor_ic_error);
      stream.next(m.bms_flag_Infor_lock_mos);
      stream.next(m.bms_flag_Infor_charge_flag);
      stream.next(m.bms_flag_Infor_hight_temperature);
      stream.next(m.bms_flag_Infor_low_temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bms_flag_Infor_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yhs_can_msgs::bms_flag_Infor_fb_<ContainerAllocator>& v)
  {
    s << indent << "bms_flag_Infor_soc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_soc);
    s << indent << "bms_flag_Infor_single_ov: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_single_ov);
    s << indent << "bms_flag_Infor_single_uv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_single_uv);
    s << indent << "bms_flag_Infor_ov: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_ov);
    s << indent << "bms_flag_Infor_uv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_uv);
    s << indent << "bms_flag_Infor_charge_ot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_charge_ot);
    s << indent << "bms_flag_Infor_charge_ut: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_charge_ut);
    s << indent << "bms_flag_Infor_discharge_ot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_discharge_ot);
    s << indent << "bms_flag_Infor_discharge_ut: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_discharge_ut);
    s << indent << "bms_flag_Infor_charge_oc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_charge_oc);
    s << indent << "bms_flag_Infor_discharge_oc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_discharge_oc);
    s << indent << "bms_flag_Infor_short: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_short);
    s << indent << "bms_flag_Infor_ic_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_ic_error);
    s << indent << "bms_flag_Infor_lock_mos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_lock_mos);
    s << indent << "bms_flag_Infor_charge_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_flag_Infor_charge_flag);
    s << indent << "bms_flag_Infor_hight_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.bms_flag_Infor_hight_temperature);
    s << indent << "bms_flag_Infor_low_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.bms_flag_Infor_low_temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YHS_CAN_MSGS_MESSAGE_BMS_FLAG_INFOR_FB_H
